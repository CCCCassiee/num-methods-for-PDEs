.. !split

.. _nonlin:pdelevel:

Linearization at the differential equation level
================================================

The attention is now turned
to nonlinear partial differential equations (PDEs)
and application of the techniques explained above for ODEs.
The model problem is a nonlinear diffusion equation for
:math:`u(\boldsymbol{x},t)`:

.. math::
        
        \frac{\partial u}{\partial t} &= \nabla\cdot ({\alpha}(u)\nabla u) + f(u),\quad
        &\boldsymbol{x}\in\Omega,\ t\in (0,T],
        
        \\ 
        -{\alpha}(u)\frac{\partial u}{\partial n} &= g,\quad &\boldsymbol{x}\in\partial\Omega_N,\ 
        t\in (0,T],
        
        \\ 
        u &= u_0,\quad &\boldsymbol{x}\in\partial\Omega_D,\ t\in (0,T]{\thinspace .}
        
        

In the present section, our aim is to discretize this problem in time
and then present techniques for linearizing the time-discrete PDE
problem "at the PDE level" such that we transform the nonlinear
stationary PDE problem at each time level into a sequence of linear
PDE problems, which can be solved using any method for linear
PDEs. This strategy avoids the solution of systems of nonlinear
algebraic equations.  In the section :ref:`nonlin:alglevel:1D` we shall take
the opposite (and more common) approach: discretize the nonlinear
problem in time and space first, and then solve the resulting
nonlinear algebraic equations at each time level by the methods of
the section :ref:`nonlin:systems:alg`.  Very often, the two approaches are
mathematically identical, so there is no preference from a
computational efficiency point of view.  The details of the ideas
sketched above will hopefully become clear through the forthcoming
examples.

.. _nonlin:pdelevel:explicit:

Explicit time integration
-------------------------

The nonlinearities in the PDE are trivial to deal with if we choose an
explicit time integration method for :ref:`(label:removed) <Eq:nonlin:pdelevel:model:pde>`,
such as the Forward Euler method:

.. math::
         [D_t^+ u = \nabla\cdot ({\alpha}(u)\nabla u) + f(u)]^n,

or written out,

.. math::
         \frac{u^{n+1} - u^n}{\Delta t} = \nabla\cdot ({\alpha}(u^n)\nabla u^n)
        + f(u^n),

which is a linear equation in the unknown :math:`u^{n+1}` with solution

.. math::
         u^{n+1} = u^n + \Delta t\nabla\cdot ({\alpha}(u^n)\nabla u^n) +
        \Delta t f(u^n){\thinspace .} 

The disadvantage with this discretization is
the strict stability criterion :math:`\Delta t \leq h^2/(6\max\alpha)`
for the case :math:`f=0` and a standard 2nd-order finite difference discretization
in 3D space with mesh cell sizes :math:`h=\Delta x=\Delta y=\Delta z`.

.. BC

.. _nonlin:pdelevel:Picard:

Backward Euler scheme and Picard iteration
------------------------------------------

A Backward Euler scheme for :ref:`(label:removed) <Eq:nonlin:pdelevel:model:pde>`
reads

.. math::
         [D_t^- u = \nabla\cdot ({\alpha}(u)\nabla u) + f(u)]^n{\thinspace .}

Written out,

.. _Eq:nonlin:pdelevel:pde:BE:

.. math::

    \tag{30}
    \frac{u^{n} - u^{n-1}}{\Delta t} = \nabla\cdot ({\alpha}(u^n)\nabla u^n)
        + f(u^n){\thinspace .}
        
        

This is a nonlinear PDE for the unknown function :math:`u^n(\boldsymbol{x})`. Such a
PDE can be viewed as a time-independent PDE where
:math:`u^{n-1}(\boldsymbol{x})` is a known function.

We introduce a Picard iteration with :math:`k` as iteration counter.
A typical linearization of the :math:`\nabla\cdot({\alpha}(u^n)\nabla u^n)` term
in iteration :math:`k+1` is to use the previously computed :math:`u^{n,k}`
approximation in the diffusion coefficient: :math:`{\alpha}(u^{n,k})`.
The nonlinear source term is treated similarly: :math:`f(u^{n,k})`.
The unknown function :math:`u^{n,k+1}` then fulfills the linear PDE

.. _Eq:nonlin:pdelevel:pde:BE:Picard:k:

.. math::

    \tag{31}
    \frac{u^{n,k+1} - u^{n-1}}{\Delta t} = \nabla\cdot ({\alpha}(u^{n,k})
        \nabla u^{n,k+1})
        + f(u^{n,k}){\thinspace .}
        
        

The initial guess for the Picard iteration at this time level can be
taken as the solution at the previous time level: :math:`u^{n,0}=u^{n-1}`.

We can alternatively apply the implementation-friendly
notation where :math:`u` corresponds to
the unknown we want to solve for, i.e., :math:`u^{n,k+1}` above, and :math:`u^{-}`
is the most recently computed value, :math:`u^{n,k}` above. Moreover,
:math:`u^{(1)}` denotes the unknown function at the previous time level, :math:`u^{n-1}`
above. The PDE to be solved in a Picard iteration then looks like

.. _Eq:nonlin:pdelevel:pde:BE:Picard:

.. math::

    \tag{32}
    \frac{u - u^{(1)}}{\Delta t} = \nabla\cdot ({\alpha}(u^{-})
        \nabla u)
        + f(u^{-}){\thinspace .}
        
        

At the beginning of the iteration we start with the value from the
previous time level: :math:`u^{-}=u^{(1)}`, and after each
iteration, :math:`u^{-}` is updated to :math:`u`.


.. admonition:: Remark on notation

   The previous derivations of the numerical scheme for time discretizations
   of PDEs have, strictly
   speaking, a somewhat sloppy notation, but it is much used and convenient
   to read. A more precise notation must
   distinguish clearly between the exact solution of the PDE problem,
   here denoted :math:`{u_{\small\mbox{e}}}(\boldsymbol{x},t)`, and the exact solution of the spatial
   problem, arising after time discretization at each time level,
   where :ref:`(30) <Eq:nonlin:pdelevel:pde:BE>` is an example. The latter
   is here represented as :math:`u^n(\boldsymbol{x})` and is an approximation to
   :math:`{u_{\small\mbox{e}}}(\boldsymbol{x},t_n)`. Then we have another approximation :math:`u^{n,k}(\boldsymbol{x})`
   to :math:`u^n(\boldsymbol{x})` when solving the nonlinear PDE problem for
   :math:`u^n` by iteration methods, as in :ref:`(31) <Eq:nonlin:pdelevel:pde:BE:Picard:k>`.
   
   In our notation, :math:`u` is a synonym for :math:`u^{n,k+1}` and :math:`u^{(1)}` is
   a synonym for :math:`u^{n-1}`, inspired by what are natural variable names
   in a code.
   We will usually state the PDE problem in terms of :math:`u` and
   quickly redefine the symbol :math:`u` to mean the numerical approximation,
   while :math:`{u_{\small\mbox{e}}}` is not explicitly introduced unless we need to talk about
   the exact solution and the approximate solution at the same time.




.. _nonlin:pdelevel:Newton:

Backward Euler scheme and Newton's method
-----------------------------------------

At time level :math:`n`, we have to solve the stationary PDE
:ref:`(30) <Eq:nonlin:pdelevel:pde:BE>`. In the previous section, we
saw how this can be done with Picard iterations.
Another alternative is to apply the idea of Newton's method
in a clever way.
Normally, Newton's method is defined for systems of *algebraic equations*,
but the idea of the method can be applied at the PDE level too.

Linearization via Taylor expansions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let :math:`u^{n,k}` be the most recently computed approximation to the unknown :math:`u^n`. We seek a
better approximation on
the form

.. _Eq:nonlin:pdelevel:Newton:ansatz:

.. math::

    \tag{33}
    u^{n} = u^{n,k} + \delta u{\thinspace .}
        
        

The idea is to insert :ref:`(33) <Eq:nonlin:pdelevel:Newton:ansatz>` in
:ref:`(30) <Eq:nonlin:pdelevel:pde:BE>`, Taylor expand the nonlinearities
and keep only the terms that are
linear in :math:`\delta u` (which makes :ref:`(33) <Eq:nonlin:pdelevel:Newton:ansatz>`
an approximation for :math:`u^{n}`). Then we can solve a linear PDE for
the correction :math:`\delta u` and use :ref:`(33) <Eq:nonlin:pdelevel:Newton:ansatz>`
to find a new approximation

.. math::
         u^{n,k+1}=u^{n,k}+\delta u

to :math:`u^{n}`.
Repeating this procedure gives a sequence :math:`u^{n,k+1}`, :math:`k=0,1,\ldots`
that hopefully converges to the goal :math:`u^n`.

Let us carry out all the mathematical details for the nonlinear diffusion
PDE discretized by the Backward Euler method.
Inserting :ref:`(33) <Eq:nonlin:pdelevel:Newton:ansatz>` in
:ref:`(30) <Eq:nonlin:pdelevel:pde:BE>` gives

.. _Eq:nonlin:pdelevel:pde:BE:Newton1:

.. math::

    \tag{34}
    \frac{u^{n,k} +\delta u - u^{n-1}}{\Delta t} =
        \nabla\cdot ({\alpha}(u^{n,k} + \delta u)\nabla (u^{n,k}+\delta u))
        + f(u^{n,k}+\delta u){\thinspace .}
        
        

We can Taylor expand :math:`{\alpha}(u^{n,k} + \delta u)` and
:math:`f(u^{n,k}+\delta u)`:

.. math::
        
        {\alpha}(u^{n,k} + \delta u) & = {\alpha}(u^{n,k}) + \frac{d{\alpha}}{du}(u^{n,k})
        \delta u + {\mathcal{O}(\delta u^2)}\approx {\alpha}(u^{n,k}) + {\alpha}^{\prime}(u^{n,k})\delta u,\\ 
        f(u^{n,k}+\delta u) &=  f(u^{n,k}) + \frac{df}{du}(u^{n,k})\delta u
        + {\mathcal{O}(\delta u^2)}\approx f(u^{n,k}) + f^{\prime}(u^{n,k})\delta u{\thinspace .}
        

Inserting the linear approximations of :math:`{\alpha}` and :math:`f` in
:ref:`(34) <Eq:nonlin:pdelevel:pde:BE:Newton1>` results in

.. math::
        
        \frac{u^{n,k} +\delta u - u^{n-1}}{\Delta t} =
        \nabla\cdot ({\alpha}(u^{n,k})\nabla u^{n,k}) + f(u^{n,k}) + \nonumber
        

.. math::
          
        \qquad \nabla\cdot ({\alpha}(u^{n,k})\nabla \delta u)
        + \nabla\cdot ({\alpha}^{\prime}(u^{n,k})\delta u\nabla u^{n,k}) + \nonumber
        

.. _Eq:nonlin:pdelevel:pde:BE:Newton2:

.. math::

    \tag{35}
    \qquad \nabla\cdot ({\alpha}^{\prime}(u^{n,k})\delta u\nabla \delta u)
        + f^{\prime}(u^{n,k})\delta u{\thinspace .}
        
        

The term :math:`{\alpha}^{\prime}(u^{n,k})\delta u\nabla \delta u` is of
order :math:`\delta u^2`
and therefore omitted since we expect the correction :math:`\delta u`
to be small (:math:`\delta u \gg \delta u^2`).
Reorganizing the equation gives a PDE
for :math:`\delta u` that we can write in short form as

.. math::
         \delta F(\delta u; u^{n,k}) = -F(u^{n,k}),

where

.. _Eq:nonlin:pdelevel:pde:BE:Newton2:F:

.. math::

    \tag{36}
    F(u^{n,k}) = \frac{u^{n,k} - u^{n-1}}{\Delta t} -
        \nabla\cdot ({\alpha}(u^{n,k})\nabla u^{n,k}) - f(u^{n,k}),
        
        

.. math::
          
        \delta F(\delta u; u^{n,k}) =
         \frac{1}{\Delta t}\delta u -
        \nabla\cdot ({\alpha}(u^{n,k})\nabla \delta u) - \nonumber
        

.. _Eq:_auto14:

.. math::

    \tag{37}
    \quad \nabla\cdot ({\alpha}^{\prime}(u^{n,k})\delta u\nabla u^{n,k})
        - f^{\prime}(u^{n,k})\delta u{\thinspace .}
        
        

Note that :math:`\delta F` is a linear function of :math:`\delta u`, and
:math:`F` contains only terms that are known, such that
the PDE for :math:`\delta u` is indeed linear.


.. admonition:: Observations

   The notational form :math:`\delta F = -F` resembles the Newton system :math:`J\delta u =-F`
   for systems of algebraic equations, with :math:`\delta F` as :math:`J\delta u`.
   The unknown vector in a linear system of algebraic equations enters
   the system as a linear operator in terms of a
   matrix-vector product (:math:`J\delta u`), while at
   the PDE level we have a linear differential operator instead
   (:math:`\delta F`).




Similarity with Picard iteration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We can rewrite the PDE for :math:`\delta u` in a slightly different way too
if we define :math:`u^{n,k} + \delta u` as :math:`u^{n,k+1}`.

.. math::
        
         \frac{u^{n,k+1} - u^{n-1}}{\Delta t} =
        \nabla\cdot ({\alpha}(u^{n,k})\nabla u^{n,k+1}) + f(u^{n,k})\nonumber
        

.. _Eq:_auto15:

.. math::

    \tag{38}
    \qquad  + \nabla\cdot ({\alpha}^{\prime}(u^{n,k})\delta u\nabla u^{n,k})
        + f^{\prime}(u^{n,k})\delta u{\thinspace .}
        
        

Note that the first line is the same PDE as arise in the Picard
iteration, while the remaining terms arise from the differentiations
that are an inherent ingredient in Newton's method.

Implementation
~~~~~~~~~~~~~~

For coding we want to introduce :math:`u` for :math:`u^n`, :math:`u^{-}` for :math:`u^{n,k}` and
:math:`u^{(1)}` for :math:`u^{n-1}`. The formulas for :math:`F` and :math:`\delta F`
are then more clearly written as

.. _Eq:nonlin:pdelevel:pde:BE:Newton2:F2:

.. math::

    \tag{39}
    F(u^{-}) = \frac{u^{-} - u^{(1)}}{\Delta t} -
        \nabla\cdot ({\alpha}(u^{-})\nabla u^{-}) - f(u^{-}),
        
        

.. math::
          
        \delta F(\delta u; u^{-}) =
         \frac{1}{\Delta t}\delta u -
        \nabla\cdot ({\alpha}(u^{-})\nabla \delta u) - \nonumber
        

.. _Eq:_auto16:

.. math::

    \tag{40}
    \quad \nabla\cdot ({\alpha}^{\prime}(u^{-})\delta u\nabla u^{-})
        - f^{\prime}(u^{-})\delta u{\thinspace .}
        
        

The form that orders the PDE as the Picard iteration terms plus
the Newton method's derivative terms becomes

.. math::
        
         \frac{u - u^{(1)}}{\Delta t} =
        \nabla\cdot ({\alpha}(u^{-})\nabla u) + f(u^{-}) + \nonumber
        

.. _Eq:_auto17:

.. math::

    \tag{41}
    \qquad  \gamma(\nabla\cdot ({\alpha}^{\prime}(u^{-})(u - u^{-})\nabla u^{-})
        + f^{\prime}(u^{-})(u - u^{-})){\thinspace .}
        
        

The Picard and full Newton versions correspond to
:math:`\gamma=0` and :math:`\gamma=1`, respectively.

Derivation with alternative notation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some may prefer to derive the linearized PDE for :math:`\delta u` using
the more compact notation. We start with inserting :math:`u^n=u^{-}+\delta u`
to get

.. math::
        
        \frac{u^{-} +\delta u - u^{n-1}}{\Delta t} =
        \nabla\cdot ({\alpha}(u^{-} + \delta u)\nabla (u^{-}+\delta u))
        + f(u^{-}+\delta u){\thinspace .}
        

Taylor expanding,

.. math::
        
        {\alpha}(u^{-} + \delta u) & \approx {\alpha}(u^{-}) + {\alpha}^{\prime}(u^{-})\delta u,\\ 
        f(u^{-}+\delta u) & \approx f(u^{-}) + f^{\prime}(u^{-})\delta u,
        

and inserting these expressions gives a less cluttered PDE for :math:`\delta u`:

.. math::
        
        \frac{u^{-} +\delta u - u^{n-1}}{\Delta t} &=
        \nabla\cdot ({\alpha}(u^{-})\nabla u^{-}) + f(u^{-}) + \\ 
        &\qquad \nabla\cdot ({\alpha}(u^{-})\nabla \delta u)
        + \nabla\cdot ({\alpha}^{\prime}(u^{-})\delta u\nabla u^{-}) + \\ 
        &\qquad \nabla\cdot ({\alpha}^{\prime}(u^{-})\delta u\nabla \delta u)
        + f^{\prime}(u^{-})\delta u{\thinspace .}
        

.. _nonlin:pdelevel:Picard:CN:

Crank-Nicolson discretization          (2)
------------------------------------------

A Crank-Nicolson discretization of
:ref:`(label:removed) <Eq:nonlin:pdelevel:model:pde>` applies a centered difference
at :math:`t_{n+\frac{1}{2}}`:

.. math::
         [D_t u = \nabla\cdot ({\alpha}(u)\nabla u) + f(u)]^{n+\frac{1}{2}}{\thinspace .}

Since :math:`u` is not known at :math:`t_{n+\frac{1}{2}}` we need to express
the terms on the right-hand side via unknowns :math:`u^n` and :math:`u^{n+1}`.
The standard technique is to apply an arithmetic average,

.. math::
         u^{n+\frac{1}{2}}\approx \frac{1}{2}(u^n + u^{n+1}){\thinspace .}

However, with nonlinear terms we have many choices of formulating
an arithmetic mean:

.. _Eq:_auto18:

.. math::

    \tag{42}
    [f(u)]^{n+\frac{1}{2}} \approx f(\frac{1}{2}(u^n + u^{n+1}))
        = [f(\overline{u}^t)]^{n+\frac{1}{2}},
        
        

.. _Eq:_auto19:

.. math::

    \tag{43}
    [f(u)]^{n+\frac{1}{2}} \approx \frac{1}{2}(f(u^n) + f(u^{n+1}))
        =[\overline{f(u)}^t]^{n+\frac{1}{2}},
        
        

.. _Eq:_auto20:

.. math::

    \tag{44}
    [{\alpha}(u)\nabla u]^{n+\frac{1}{2}} \approx
        {\alpha}(\frac{1}{2}(u^n + u^{n+1}))\nabla (\frac{1}{2}(u^n + u^{n+1}))
        = [{\alpha}(\overline{u}^t)\nabla \overline{u}^t]^{n+\frac{1}{2}},
        
        

.. _Eq:_auto21:

.. math::

    \tag{45}
    [{\alpha}(u)\nabla u]^{n+\frac{1}{2}} \approx
        \frac{1}{2}({\alpha}(u^n) + {\alpha}(u^{n+1}))\nabla (\frac{1}{2}(u^n + u^{n+1}))
        = [\overline{{\alpha}(u)}^t\nabla\overline{u}^t]^{n+\frac{1}{2}},
        
        

.. _Eq:_auto22:

.. math::

    \tag{46}
    [{\alpha}(u)\nabla u]^{n+\frac{1}{2}} \approx
        \frac{1}{2}({\alpha}(u^n)\nabla u^n + {\alpha}(u^{n+1})\nabla u^{n+1})
        = [\overline{{\alpha}(u)\nabla u}^t]^{n+\frac{1}{2}}{\thinspace .}
        
        

A big question is whether there are significant differences in accuracy
between taking the products of arithmetic means or taking the arithmetic
mean of products. :ref:`nonlin:exer:products:arith:mean` investigates
this question, and the answer is that the approximation is
:math:`{\mathcal{O}(\Delta t^2)}` in both cases.

